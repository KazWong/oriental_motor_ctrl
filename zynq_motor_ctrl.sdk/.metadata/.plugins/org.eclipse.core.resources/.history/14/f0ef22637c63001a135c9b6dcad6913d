#include <stdio.h>
#include <math.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_types.h"

#include "sleep.h"
#include "xtime_l.h"

#include "motor_driver_pins.h"
#include "motor_dac_ctrl.h"
#include "zynq_can.h"


XCanPs Can;

u32 pin_fw[] = {emio_mot_a_fw, emio_mot_b_fw, emio_mot_c_fw, emio_mot_d_fw};
u32 pin_bw[] = {emio_mot_a_bw, emio_mot_b_bw, emio_mot_c_bw, emio_mot_d_bw};

u8 RECEIVED[] = {'1', '2', '3', '4', '5', '6', '7', 0x00};
u8 E[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
u8 U[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


int Init() {
	s32 Status;
	u8 START[] = {'s', 't', 'a', 'r', 't', '0', '0', '1'};
	u8 zero[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	int count = 0;

	init_platform();
// Motor
    zynq_to_motor_init();
    dac_init_val();

    zynq_to_motor_ctrl(0x88, 0x88);

    for (int i=0;i<4;i++) {
    	zynq_write_fw_bw_pins(pin_fw[i], pin_off);
    	zynq_write_fw_bw_pins(pin_bw[i], pin_off);
    }
    dac_send_four_val(zero);


// CAN
    CanPsPolledExample(CAN_DEVICE_ID, &Can);

// Ready Msg
    while (count < 10) {
    	START[7] = count;
    	Status = SendFrame(&Can, count, START, (u8) sizeof(START));
    	if (Status != XST_SUCCESS) {
    		print("Send failed.\n\r");
    		return XST_FAILURE;
    	}
    	count++;
    	usleep(1000);
    }
    return XST_SUCCESS;
}

void End() {
	s32 Status;
	u8 EXIT[] = {'5', '5', '5', '5', '5', '5', '5', '5'};

	for (int i=0;i<4;i++) {
	   	zynq_write_fw_bw_pins(pin_fw[i], pin_off);
	  	zynq_write_fw_bw_pins(pin_bw[i], pin_off);
	}

	Status = SendFrame(&Can, 0x66, EXIT, (u8) sizeof(EXIT));

    cleanup_platform();
}





u16 dac[4] = {0, 0, 0, 0};
void SoftStop() {
	s32 Status;
	u8 EXIT[] = {'5', '5', '5', '5', '5', '5', '5', '5'};
	Status = SendFrame(&Can, 0x55, EXIT, (u8) sizeof(EXIT));

	XTime t_now, t_softstop;
	double ctrl_hz = 550.0;
	u8 dac_val[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

	XTime_GetTime(&t_now);
	XTime_GetTime(&t_softstop);
	while (dac[0] > 0x0000 || dac[1] > 0x0000 || dac[2] > 0x0000 || dac[3] > 0x0000) {
		if (1./ctrl_hz < ( 1.0 * (t_now - t_softstop) / (COUNTS_PER_SECOND) )) {
			for (int i=0; i<4; i++) {
				u8 *pt_dac = (u8*)&dac[i];
				if ( (s32)(dac[i] - 0x6) > 0) {
					dac[i] = dac[i] - 0x6;
				} else {
					dac[i] = 0;
				}
				dac_val[2*i] = *(pt_dac+1);
				dac_val[2*i+1] = *pt_dac;
			}

			dac_send_four_val(dac_val);
			XTime_GetTime(&t_softstop);
		}

		XTime_GetTime(&t_now);
	}


	XTime_GetTime(&t_softstop);
	do{
		XTime_GetTime(&t_now);
	}while((0.1 > (1.0*(t_now - t_softstop) / (COUNTS_PER_SECOND))));

}


_Float64 lx_ly = 0.842;
_Float64 R = 0.07825;
_Float64 LIM_VEL = 6.555456670490;
_Float64 MAX_VEL = 4.916592502868;
_Float64 MAX_OMEGA = 83.77580409572;
_Float64 duration = 300.0;
_Float64 MAX_COUNT = 100;

//Zieglerâ€“Nichols method: Ku=1.33, Tu=0.5
_Float64 Kp = 0.798;//0.798
_Float64 Ki = 3.192;//3.192
_Float64 Kd = 0.0050875;//0.0049875

//Motion Profile
_Float64 jmax = 0.001;
_Float64 amax = 0.01, t, t1, t2;

//
_Float64 u[2][4] = { {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0} }; //ratio 0-1
_Float64 e[3][4] = { {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0} }; //ratio 0-1
_Float64 y[2][4] = { {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0} }; //ratio 0-1
_Float64 w[4] = {0.0, 0.0, 0.0, 0.0};
_Float64 r[4] = {0.0, 0.0, 0.0, 0.0}; //ratio 0-1
_Float64 a[4] = {0.0, 0.0, 0.0, 0.0};

void CANout(_Float64 fb_dt) {
	s32 Status;
	u8 FB[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 W[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 E[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 U[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

	s16 int_r;
	for (int i=0;i<4;i++) {
		s8 *pt_r = (s8*)&int_r;
		int_r = (s16)(4095. * a[i]);
		W[2*i] = *(pt_r+1);
		W[2*i+1] = *(pt_r);
	}

	s16 int_y;
	for (int i=0;i<4;i++) {
		s8 *pt_y = (s8*)&int_y;
		int_y = (s16)(4095. * (y[0][i] + a[i]*fb_dt));
		FB[2*i] = *(pt_y);
		FB[2*i+1] = *(pt_y+1);
	}

	s16 int_e;
	for (int i=0;i<4;i++) {
		s8 *pt_e = (s8*)&int_e;
		int_e = (s16)(4095. * e[0][i]);
		E[2*i] = *(pt_e+1);
		E[2*i+1] = *(pt_e);
	}

	s16 int_u;
	for (int i=0;i<4;i++) {
		s8 *pt_u = (s8*)&int_u;
		int_u = (s16)(4095. * u[0][i]);
		U[2*i] = *(pt_u+1);
		U[2*i+1] = *(pt_u);
	}


	Status = SendFrame(&Can, 0x22, W, (u8) sizeof(W));
	Status = SendFrame(&Can, 0x33, FB, (u8) sizeof(FB));
	Status = SendFrame(&Can, 0x44, E, (u8) sizeof(E));
	Status = SendFrame(&Can, 0x11, U, (u8) sizeof(U));
}

void SpeedOut(_Float64 dt) {
	for (int i=0;i<4;i++)
		y[1][i] = y[0][i];

	y[0][0] = (_Float64)Xil_In32(0x41200000) / MAX_COUNT;
	y[0][1] = (_Float64)Xil_In32(0x41200008) / MAX_COUNT;
	y[0][2] = (_Float64)Xil_In32(0x41210000) / MAX_COUNT;
	y[0][3] = (_Float64)Xil_In32(0x41210008) / MAX_COUNT;

	for (int i=0;i<4;i++) {
		if (zynq_read_fw_bw_pins(pin_bw[i]) && !zynq_read_fw_bw_pins(pin_fw[i]))
			y[0][i] = -y[0][i];

		a[i] = (y[0][i] - y[1][i]) / dt;
	}
}

void Setpoint(_Float64 dt) {
	s32 Status;
	u32 RxFrame[XCANPS_MAX_FRAME_SIZE_IN_WORDS] = {0};
	u16 x, y, z;
	u8 *ptr_x, *ptr_y, *ptr_z, b;
	_Float64 vx, vy, vz;

	ptr_x = (u8*)(&x);
	ptr_y = (u8*)(&y);
	ptr_z = (u8*)(&z);

	Status = RecvFrame(&Can, 0x88, RxFrame, 10);
	if (Status != XST_SUCCESS) {
		//Status = SendFrame(&Can, 0x01, TxFrame, (u8) sizeof(TxFrame));
		return;
	}

	u8 *FramePtr;
	FramePtr = (u8 *)(&RxFrame[2]);
	for (int i=0;i<2;i++, ptr_x++, ptr_y++, ptr_z++, FramePtr++) {
		*ptr_x = *FramePtr;
		*ptr_y = *(FramePtr+2);
		*ptr_z = *(FramePtr+4);
	}
	b = (u8)*(((u8*)(&RxFrame[2]))+6);

	vx = ( (_Float64)x / 65535.0 * MAX_VEL ) * (1 - ((b & 0b100)>>1));
	vy = ( (_Float64)y / 65535.0 * MAX_VEL ) * (1 - (b & 0b010));
	vz = ( (_Float64)z / 65535.0 * MAX_VEL ) * (1 - ((b & 0b001)<<1));

	//Inv Kinematics
	w[0] = (- vx + vy + (lx_ly)*vz) / LIM_VEL;
	w[1] = (  vx + vy + (lx_ly)*vz) / LIM_VEL;
	w[2] = (- vx - vy + (lx_ly)*vz) / LIM_VEL;
	w[3] = (  vx - vy + (lx_ly)*vz) / LIM_VEL;
}

void Ctrl(_Float64 Ts, _Float64 fb_dt, _Float64 cmd_dt){
	for (int i=0; i<4; i++) {
		if (a[i] > amax)
			a[i] = amax;
		t1 = ( -jmax + sqrt( (double)(jmax*jmax - 4*jmax*jmax*a[i]/(4*amax)) ) )/-2*(jmax*jmax/(4*amax));
		t2 = ( -jmax - sqrt( (double)(jmax*jmax - 4*jmax*jmax*a[i]/(4*amax)) ) )/-2*(jmax*jmax/(4*amax));
		if (t1 > 0)
			t = t1 + Ts;
		else
			t = t2 + Ts;
		r[i] = -2*jmax*jmax/(4*amax) * t*t*t + jmax*t*t + w[i];
	}

	for (int i=0; i<4; i++) {
		u[1][i] = u[0][i];

		e[2][i] = e[1][i];
		e[1][i] = e[0][i];
		e[0][i] = w[i] - (y[0][i] + a[i]*fb_dt);

		u[0][i] = r[i];//u[1][i] + Kp*(e[0][i] - e[1][i]) + Ki*Ts*(e[0][i]) + (Kd/Ts)*(e[0][i] - 2*e[1][i] + e[2][i]);
	}
}

void Plant(_Float64 dt) {
	u8 dac_addr[] = {DAC_IIC_ADDR_A, DAC_IIC_ADDR_B, DAC_IIC_ADDR_C, DAC_IIC_ADDR_D};
	u8 dac_val[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u16 MAX_DAC = 0x0FFF; //Final Protection, local variable

	for (int i=0; i<4; i++) {
		u8 *pt_dac = (u8*)&dac[i];

		if (u[0][i] > 0.0) {
			zynq_write_fw_bw_pins(pin_fw[i], pin_on);
			zynq_write_fw_bw_pins(pin_bw[i], pin_off);
		}else if (u[0][i] < 0.0) {
			zynq_write_fw_bw_pins(pin_fw[i], pin_off);
			zynq_write_fw_bw_pins(pin_bw[i], pin_on);
		}

		dac[i] = (u16)(fabs(u[0][i]) * 4095.);

		if (dac[i] > MAX_DAC) {
			dac[i] = MAX_DAC;
		} else if (dac[i] < 0x000) {
			dac[i] = 0x000;
		}

		dac_val[2*i] = *(pt_dac+1);
		dac_val[2*i+1] = *pt_dac;

		dac_send_val(dac_addr[i], &dac_val[2*i]);
	}
}

int main(void) {
	XTime t_start, t_now, t_ctrl, t_speedout, t_cmd, t_Ts, t_Ta, t_Tca, t_CANout, t_p;
	double  elapsed_time = 0.0;
	float ctrl_hz = 4000., speed_out_t = 0.05, cmd_hz = 40., can_hz = 10., p_hz = 4000.;
	Init();

	XTime_GetTime(&t_start);
	XTime_GetTime(&t_speedout);
	XTime_GetTime(&t_cmd);
	XTime_GetTime(&t_ctrl);
	XTime_GetTime(&t_CANout);
	XTime_GetTime(&t_now);
	while (elapsed_time < duration) {
		if (speed_out_t <= ( 1.0 * (t_now - t_speedout) / (COUNTS_PER_SECOND) )) {
			XTime_GetTime(&t_Ta);
			SpeedOut((_Float64)(1.0 * (t_Ta - t_speedout) / (COUNTS_PER_SECOND)));
			XTime_GetTime(&t_speedout);
		}

		if (1./cmd_hz <= ( 1.0 * (t_now - t_cmd) / (COUNTS_PER_SECOND) )) {
			XTime_GetTime(&t_Tca);
			Setpoint((_Float64)(1.0 * (t_Tca - t_cmd) / (COUNTS_PER_SECOND)));
			XTime_GetTime(&t_cmd);
		}

		if (1./ctrl_hz <= ( 1.0 * (t_now - t_ctrl) / (COUNTS_PER_SECOND) )) {
			XTime_GetTime(&t_Ts);
			Ctrl((_Float64)(1.0 * (t_Ts - t_ctrl) / (COUNTS_PER_SECOND)),
				(_Float64)(1.0 * (t_Ts - t_Ta) / (COUNTS_PER_SECOND)),
				(_Float64)(1.0 * (t_Ts - t_Tca) / (COUNTS_PER_SECOND)));
			XTime_GetTime(&t_ctrl);
		}

		if (1./p_hz <= ( 1.0 * (t_now - t_p) / (COUNTS_PER_SECOND) )) {
			XTime_GetTime(&t_p);
			Plant((_Float64)(1.0 * (t_p - t_Ta) / (COUNTS_PER_SECOND)));
			XTime_GetTime(&t_p);
		}

		if (1./can_hz <= ( 1.0 * (t_now - t_CANout) / (COUNTS_PER_SECOND) )) {
			XTime_GetTime(&t_CANout);
			CANout((_Float64)(1.0 * (t_CANout - t_Ta) / (COUNTS_PER_SECOND)));
			XTime_GetTime(&t_CANout);
		}

		XTime_GetTime(&t_now);
		elapsed_time = 1.0 * (t_now - t_start) / (COUNTS_PER_SECOND);
	}

	SoftStop();
	End();
	return 0;
}
