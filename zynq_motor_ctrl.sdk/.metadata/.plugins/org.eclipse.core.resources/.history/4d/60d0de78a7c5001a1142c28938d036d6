#include <stdio.h>
#include <math.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_types.h"

#include "sleep.h"
#include "xtime_l.h"

#include "motor_driver_pins.h"
#include "motor_dac_ctrl.h"
#include "motor_axi_gpio.h"
#include "zynq_can.h"


XCanPs Can;

u32 pin_fw[] = {emio_mot_a_fw, emio_mot_b_fw, emio_mot_c_fw, emio_mot_d_fw};
u32 pin_bw[] = {emio_mot_a_bw, emio_mot_b_bw, emio_mot_c_bw, emio_mot_d_bw};

int Init() {
	s32 Status;
	u8 START[] = {'s', 't', 'a', 'r', 't', '0', '0', '1'};
	u8 zero[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	int count = 0;

	init_platform();
	print("System Boot.\n\r");
// Motor
    zynq_to_motor_init();
    dac_init_val();

    zynq_to_motor_ctrl(0x88, 0x88);

    for (int i=0;i<4;i++) {
    	zynq_write_fw_bw_pins(pin_fw[i], pin_off);
    	zynq_write_fw_bw_pins(pin_bw[i], pin_off);
    }
    dac_send_four_val(zero);
    AXIGPIOInit();


// CAN
    CanPsPolledExample(CAN_DEVICE_ID, &Can);

// Ready Msg
    while (count < 10) {
    	START[7] = count;
    	Status = SendFrame(&Can, count, START, (u8) sizeof(START));
    	if (Status != XST_SUCCESS) {
    		print("Send failed.\n\r");
    		return XST_FAILURE;
    	}
    	count++;
    	usleep(1000);
    }
    return XST_SUCCESS;
}

void End() {
	s32 Status;
	u8 EXIT[] = {'5', '5', '5', '5', '5', '5', '5', '5'};

	for (int i=0;i<4;i++) {
	   	zynq_write_fw_bw_pins(pin_fw[i], pin_off);
	  	zynq_write_fw_bw_pins(pin_bw[i], pin_off);
	}

	Status = SendFrame(&Can, 0x66, EXIT, (u8) sizeof(EXIT));

    //cleanup_platform();
}





void SoftStop(u16 *dac) {
	s32 Status;
	u8 EXIT[] = {'5', '5', '5', '5', '5', '5', '5', '5'};
	Status = SendFrame(&Can, 0x55, EXIT, (u8) sizeof(EXIT));

	XTime t_now, t_softstop;
	double ctrl_hz = 550.0;
	u8 dac_val[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

	XTime_GetTime(&t_now);
	XTime_GetTime(&t_softstop);
	while (dac[0] > 0x0000 || dac[1] > 0x0000 || dac[2] > 0x0000 || dac[3] > 0x0000) {
		if (1./ctrl_hz < ( 1.0 * (t_now - t_softstop) / (COUNTS_PER_SECOND) )) {
			for (int i=0; i<4; i++) {
				u8 *pt_dac = (u8*)&dac[i];
				if ( (s32)(dac[i] - 0x6) > 0) {
					dac[i] = dac[i] - 0x6;
				} else {
					dac[i] = 0;
				}
				dac_val[2*i] = *(pt_dac+1);
				dac_val[2*i+1] = *pt_dac;
			}

			dac_send_four_val(dac_val);
			XTime_GetTime(&t_softstop);
		}

		XTime_GetTime(&t_now);
	}


	XTime_GetTime(&t_softstop);
	do{
		XTime_GetTime(&t_now);
	}while((0.1 > (1.0*(t_now - t_softstop) / (COUNTS_PER_SECOND))));

}

/*******************************************
 * Notation
 *
 * lx_ly: half of the distance between front wheels + half of the distance between front wheel and the rear wheels
 * R: radius of the wheels
 * Kp: proportional gain in PID loop
 * Ki: integral gain in PID loop
 * Kd: derivative gain in PID loop
 * u: input to plant
 * e: error of ref - feedback
 * y: feedback velocity from each wheels
 * v: command velocity for each wheels
 * w: velocity after motion profile for each wheels
 * a: feedback acceleration
 * cmd_a: command acceleration
 * a_y, a_v: array of past acceleration values
 * s: position for each wheels
 *
********************************************/


_Float64 lx_ly = 0.4165;
_Float64 R = 0.07825;
_Float64 LIM_SPEED = 6.555456670490;
_Float64 MIN_SPEED = 0.131109133;//v = HzpiD/150, 40Hz
_Float64 MAX_VEL = 2.0;//4.916592502868;
_Float64 MAX_OMEGA = 4.71238898;//11.80454382 MAX_VEL/(lx_ly);
u16 MAX_DAC = 0x0FFF; //Final Protection
_Float64 DAC_COMPEN = 1.03310880392010;//1.05*6.45/LIM_SPEED;

u16 MAX_VEL16 = 13081; //MAX_VEL / 65535.0 * LIM_SPEED
u16 MAX_OMEGA16 = 31406; //MAX_OMEGA / 65535.0 * LIM_SPEED

//
_Float64 duration = 60000.0;

//Zieglerâ€“Nichols method: Ku=1.33, Tu=0.5, Kp=0.798, Ki=3.192, Kd=0.0049875
//noload gain Kp: 0.5, Ki: 4.8, Kd: 0.005
_Float64 Kp = 0.65;//0.245;
_Float64 Ki = 2.7;//1.092;
_Float64 Kd = 0.008;//0.0028;

//Motion Profile
//_Float64 MAX_ACC = 0.77;
//_Float64 MAX_DEC = 1.1;
_Float64 MAX_ACC_VEL = 0.0077; // MAX_ACC*t_ctrl
_Float64 MAX_DEC_VEL = 0.0090; // MAX_DEC*t_ctrl

//
_Float64 plant_t = 0.00625;
//
u16 dac[4] = {0, 0, 0, 0};
_Float64 u[4] = {0.0, 0.0, 0.0, 0.0};
_Float64 e[3][4] = { {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0} };
_Float64 y[4] = {0.0, 0.0, 0.0, 0.0};
_Float64 v[4] = {0.0, 0.0, 0.0, 0.0};
_Float64 w[4] = {0.0, 0.0, 0.0, 0.0};
_Float64 a[4] = {0.0, 0.0, 0.0, 0.0};
_Float64 cmd_a[4] = {0.0, 0.0, 0.0, 0.0};
_Float64 a_y[5][4] = { {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0} };
_Float64 a_v[5][4] = { {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0} };
_Float64 s[4] = {0.0, 0.0, 0.0, 0.0};
_Float32 odom[3] = {0.0, 0.0, 0.0};
_Float64 p_t[4] = {0.00625, 0.00625, 0.00625, 0.00625};

void CANout(_Float64 fb_dt) {
	s32 Status;
	s16 int_s16 = 0;
	u8 msg_11[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 msg_22[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 msg_33[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 msg_44[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 msg_55[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 msg_66[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

	int_s16 = 0;
	for (int i=0;i<4;i++) {
		s8 *ptr = (s8*)&int_s16;
		int_s16 = (s16)(s[i] * 100.);
		msg_11[2*i] = *(ptr);
		msg_11[2*i+1] = *(ptr+1);
	}

	int_s16 = 0;
	for (int i=0;i<4;i++) {
		s8 *ptr = (s8*)&int_s16;
		int_s16 = (s16)(32767. * a[i] / LIM_SPEED);
		msg_22[2*i] = *(ptr);
		msg_22[2*i+1] = *(ptr+1);
	}

	int_s16 = 0;
	for (int i=0;i<4;i++) {
		s8 *ptr = (s8*)&int_s16;
		int_s16 = (s16)(32767. * y[i] / LIM_SPEED);
		msg_33[2*i] = *(ptr);
		msg_33[2*i+1] = *(ptr+1);
	}

	int_s16 = 0;
	for (int i=0;i<4;i++) {
		s8 *ptr = (s8*)&int_s16;
		int_s16 = (s16)(32767. * w[i] / LIM_SPEED);
		msg_44[2*i] = *(ptr);
		msg_44[2*i+1] = *(ptr+1);
	}

	for (int i=0;i<4;i++) {
		u8 *ptr = (u8*)&odom[0];
		msg_55[i] = *(ptr+i);
	}

	for (int i=0;i<4;i++) {
		u8 *ptr = (u8*)&odom[1];
		msg_55[i+4] = *(ptr+i);
	}

	for (int i=0;i<4;i++) {
		u8 *ptr = (u8*)&odom[2];
		msg_66[i] = *(ptr+i);
	}

	Status = SendFrame(&Can, 0x11, msg_11, (u8) sizeof(msg_11));//pos
	Status = SendFrame(&Can, 0x22, msg_22, (u8) sizeof(msg_22));//acc
	Status = SendFrame(&Can, 0x33, msg_33, (u8) sizeof(msg_33));//vel
	Status = SendFrame(&Can, 0x44, msg_44, (u8) sizeof(msg_44));//cmd
	Status = SendFrame(&Can, 0x55, msg_55, (u8) sizeof(msg_55));//odom xy
	Status = SendFrame(&Can, 0x66, msg_66, (u8) sizeof(msg_66));//odom z
}

void SpeedOut(_Float64 dt) {
	u32 count[4] = {0, 0, 0, 0};
	double p[4] = {0.0, 0.0, 0.0, 0.0};
	double t[4] = {0.0, 0.0, 0.0, 0.0};
	double K = 10000000.*M_PI*2.*R/150.; //32777.283352454
	double alp = dt / (0.04 + dt);

	count[0] = Xil_In32(0x41200000);
	count[1] = Xil_In32(0x41200008);
	count[2] = Xil_In32(0x41210000);
	count[3] = Xil_In32(0x41210008);

	for (int i=0;i<4;i++) {
		double _y;

		t[i] = (double)(count[i] >> 19);
		p[i] = (double)(count[i] & 0x7FFFF);
		_y = (p[i] == 0.0 || t[i] == 0.0)? 0.0 : K * t[i] / p[i];
		if (zynq_read_fw_bw_pins(pin_bw[i]) && !zynq_read_fw_bw_pins(pin_fw[i]))
			_y = -_y;
		y[i] += alp*(_y - y[i]);
	}
}

void Integrator(_Float64 dt) {
	double sx, sy, rz, _s[4];

	for (int i=0;i<4;i++) {
		_s[i] = y[i] * dt;
	}

	//Fwd Kinematics + odom est
	sx = (-_s[0] + _s[1] - _s[2] + _s[3]) / 4.;
	sy = ( _s[0] + _s[1] - _s[2] - _s[3]) / 4.;
	rz = ( _s[0] + _s[1] + _s[2] + _s[3]) / (lx_ly*4.);

	if (odom[2]+rz > 2.*M_PI)
		odom[2] = (odom[2]+rz) - 2.*M_PI;
	else if (odom[2]+rz < 0.0)
		odom[2] = 2.*M_PI - (odom[2]+rz);
	else
		odom[2] += rz;
	odom[0] += sx * cos(odom[2]) - sy * sin(odom[2]);
	odom[1] += sx * sin(odom[2]) + sy * cos(odom[2]);

	for (int i=0;i<4;i++)
		s[i] += _s[i];
}

void Differentiator(_Float64 (*last)[4], _Float64 *vel, _Float64 *acc, _Float64 dt) {
	double alp = dt / (0.1 + dt);

	for (int i=0;i<4;i++) {
		double _acc;

		last[4][i] = last[3][i];
		last[3][i] = last[2][i];
		last[2][i] = last[1][i];
		last[1][i] = last[0][i];
		last[0][i] = vel[i];

		//_acc = (3*last[0][i] - 4*last[1][i] + last[2][i]) / (2*dt); //1st order Backward Difference
		_acc = (-last[4][i] + 8*last[3][i] - 8*last[1][i] + last[0][i]) / (12*dt); //1st order Center Difference
		acc[i] += alp*(_acc - acc[i]);
	}
}

void Setpoint(_Float64 dt) {
	s32 Status;
	u32 RxFrame[XCANPS_MAX_FRAME_SIZE_IN_WORDS] = {0};
	u16 x, y, z;
	u8 *ptr_x, *ptr_y, *ptr_z, b;
	_Float64 vx, vy, wz;

	ptr_x = (u8*)(&x);
	ptr_y = (u8*)(&y);
	ptr_z = (u8*)(&z);

	Status = RecvFrame(&Can, -1, RxFrame, 10);
	if (Status != XST_SUCCESS) {
		//Status = SendFrame(&Can, 0x01, TxFrame, (u8) sizeof(TxFrame));
		return;
	}

	if (CheckID(0x88, RxFrame)) {
		u8 *FramePtr;
		FramePtr = (u8 *)(&RxFrame[2]);
		for (int i=0;i<2;i++, ptr_x++, ptr_y++, ptr_z++, FramePtr++) {
			*ptr_x = *FramePtr;
			*ptr_y = *(FramePtr+2);
			*ptr_z = *(FramePtr+4);
		}
		b = (u8)*(((u8*)(&RxFrame[2]))+6);

		//convert and limit the velocity
		/*vx = (_Float64)x / 65535.0 * LIM_SPEED;
		vy = (_Float64)y / 65535.0 * LIM_SPEED;
		wz = (_Float64)z / 65535.0 * LIM_SPEED;

		vx = (vx > MAX_VEL)? MAX_VEL:vx;
		vy = (vy > MAX_VEL)? MAX_VEL:vy;
		wz = (wz > MAX_OMEGA)? MAX_OMEGA:wz;*/

		vx = ((_Float64)x > MAX_VEL16)? MAX_VEL:(_Float64)x / 65535.0 * LIM_SPEED;
		vy = ((_Float64)y > MAX_VEL16)? MAX_VEL:(_Float64)y / 65535.0 * LIM_SPEED;
		wz = ((_Float64)z > MAX_OMEGA16)? MAX_OMEGA:(_Float64)z / 65535.0 * LIM_SPEED;

		vx *= (1 - ((b & 0b100)>>1));
		vy *= (1 - (b & 0b010));
		wz *= (1 - ((b & 0b001)<<1));

		//Inv Kinematics + round to 0.01
		v[0] = - vx + vy + (lx_ly)*wz;
		v[1] =   vx + vy + (lx_ly)*wz;
		v[2] = - vx - vy + (lx_ly)*wz;
		v[3] =   vx - vy + (lx_ly)*wz;
	} else if (CheckID(0x99, RxFrame)) {
		u8 *FramePtr;
		FramePtr = (u8 *)(&RxFrame[2]);

		switch (*FramePtr) {
		case 0xEF:
			duration = 0;
			break;
		case 0xDD:
			s[0] = s[1] = s[2] = s[3] = 0.0;
			odom[0] = odom[1] = odom[2] = 0.0;
			break;
		case 0xDF:
			u[0] = u[1] = u[2] = u[3] = 0.0;
			break;
		}
	}
}

void Ctrl(_Float64 Ts, _Float64 fb_dt, _Float64 cmd_dt){
	//trapezoidal profile
	for (int i=0; i<4; i++) {
		float dv = v[i] - w[i];

		if (w[i] >= 0.0 && dv > MAX_ACC_VEL)
			w[i] = w[i] + MAX_ACC_VEL;
		else if (w[i] >= 0.0 && dv < -MAX_DEC_VEL)
			w[i] = w[i] - MAX_DEC_VEL;
		else if (w[i] < 0.0 && dv  > MAX_DEC_VEL)
			w[i] = w[i] + MAX_DEC_VEL;
		else if (w[i] < 0.0 && dv < -MAX_ACC_VEL)
			w[i] = w[i] - MAX_ACC_VEL;
		else
			w[i] = w[i] + dv;
	}

	//PID
	for (int i=0; i<4; i++) {
		e[2][i] = e[1][i];
		e[1][i] = e[0][i];
		e[0][i] = w[i] - y[i];

		u[i] = u[i] + (Kp*(e[0][i]-e[1][i]) + Ki*Ts*(e[0][i]) + (Kd/Ts)*(e[0][i] - 2*e[1][i] + e[2][i]));
	}
}

void Plant(int idx, u8 dac_addr) {
	u8 dac_val[] = {0x00, 0x00};
	u8 *pt_dac = (u8*)&dac[idx];
	u16 start_dac = (u16)(4095. * MIN_SPEED / LIM_SPEED);
	u16 stop_dac = 0x020;
	_Float64 stop_vel = 0x020 * LIM_SPEED / (4095. * MIN_SPEED);
	u8 su = *((s64 *)(&u[idx]))>>63;
	u8 sy = *((s64 *)(&y[idx]))>>63;

	//send dac
	dac[idx] = (u16)floor(fabs(u[idx] / (LIM_SPEED*DAC_COMPEN)) * 4095.);//LIM_SPEED*1.05 compensate offset of estv and cmdv

	if (dac[idx] > MAX_DAC) {
		dac[idx] = MAX_DAC;
	} else if (dac[idx] < 0x000) {
		dac[idx] = 0x000;
	} else if (start_dac > dac[idx] && dac[idx] > stop_dac) {
		dac[idx] = start_dac;
	}

	//direction
	if (su != sy) {
		p_t[idx] = (a[idx] == 0.0)? plant_t : (stop_vel - y[idx]) / a[idx];
		p_t[idx] = (p_t[idx] > 0.05)? plant_t : p_t[idx];
	}

	if (fabs(y[idx]) < stop_vel && dac[idx] > stop_dac) {
		if (su) {
			zynq_write_fw_bw_pins(pin_fw[idx], pin_off);
			zynq_write_fw_bw_pins(pin_bw[idx], pin_on);
			p_t[idx] = plant_t;
		} else {
			zynq_write_fw_bw_pins(pin_fw[idx], pin_on);
			zynq_write_fw_bw_pins(pin_bw[idx], pin_off);
			p_t[idx] = plant_t;
		}
	}


	dac_val[0] = *(pt_dac+1);
	dac_val[1] = *pt_dac;

	dac_send_val(dac_addr, dac_val);
}

int main(void) {
	u8 dac_addr[] = {DAC_IIC_ADDR_A, DAC_IIC_ADDR_B, DAC_IIC_ADDR_C, DAC_IIC_ADDR_D};
	XTime t_start, t_now, t_ctrl, t_speedout, t_cmd, t_Ta, t_Tca, t_CANout, t_est_a, t_est_ca;
	XTime t_p[4];
	double  elapsed_time = 0.0;
	float ctrl_t = 1./100., fb_hz = 500., cmd_hz = 60., can_hz = 20., est_a_hz = 20., est_ca_hz = 20.;

	Init();
	/*5s Startup time
	for (int i=0;i<4;i++) {
		zynq_write_fw_bw_pins(pin_fw[i], pin_off);
		zynq_write_fw_bw_pins(pin_bw[i], pin_off);
	}
	XTime_GetTime(&t_start);
	XTime_GetTime(&t_now);
	while (1.0 > 1.0 * (t_now - t_start) / (COUNTS_PER_SECOND)) XTime_GetTime(&t_now);
	*/

	//

	XTime_GetTime(&t_start);
	XTime_GetTime(&t_now);
	XTime_GetTime(&t_speedout);
	XTime_GetTime(&t_cmd);
	XTime_GetTime(&t_est_a);
	XTime_GetTime(&t_est_ca);
	XTime_GetTime(&t_ctrl);
	XTime_GetTime(&t_CANout);
	for (int i=0;i<4;i++)
		XTime_GetTime(&t_p[i]);

	while (elapsed_time < duration) {
		XTime_GetTime(&t_now);
		if (1./fb_hz <= ( 1.0 * (t_now - t_speedout) / (COUNTS_PER_SECOND) )) {
			SpeedOut((_Float64)(1.0 * (t_now - t_speedout) / (COUNTS_PER_SECOND)));
			XTime_GetTime(&t_speedout);
		}

		XTime_GetTime(&t_now);
		if (1./can_hz <= ( 1.0 * (t_now - t_CANout) / (COUNTS_PER_SECOND) )) {
			CANout((_Float64)(1.0 * (t_now - t_Ta) / (COUNTS_PER_SECOND)));
			XTime_GetTime(&t_CANout);
		}

		XTime_GetTime(&t_now);
		if (1./est_a_hz <= ( 1.0 * (t_now - t_est_a) / (COUNTS_PER_SECOND) )) {
			XTime_GetTime(&t_Ta);
			Differentiator(a_y, y, a, (_Float64)(1.0 * (t_now - t_est_a) / (COUNTS_PER_SECOND)));
			XTime_GetTime(&t_est_a);
		}

		XTime_GetTime(&t_now);
		if (1./est_ca_hz <= ( 1.0 * (t_now - t_est_ca) / (COUNTS_PER_SECOND) )) {
			XTime_GetTime(&t_Tca);
			Differentiator(a_v, v, cmd_a, (_Float64)(1.0 * (t_now - t_est_ca) / (COUNTS_PER_SECOND)));
			XTime_GetTime(&t_est_ca);
		}

		XTime_GetTime(&t_now);
		if (1./cmd_hz <= ( 1.0 * (t_now - t_cmd) / (COUNTS_PER_SECOND) )) {
			Setpoint((_Float64)(1.0 * (t_now - t_cmd) / (COUNTS_PER_SECOND)));
			XTime_GetTime(&t_cmd);
		}

		XTime_GetTime(&t_now);
		if (ctrl_t <= ( 1.0 * (t_now - t_ctrl) / (COUNTS_PER_SECOND) )) {
			Integrator((_Float64)(1.0 * (t_now - t_ctrl) / (COUNTS_PER_SECOND)));
			Ctrl((_Float64)(1.0 * (t_now - t_ctrl) / (COUNTS_PER_SECOND)),
								(_Float64)(1.0 * (t_now - t_Ta) / (COUNTS_PER_SECOND)),
								(_Float64)(1.0 * (t_now - t_cmd) / (COUNTS_PER_SECOND)));
			XTime_GetTime(&t_ctrl);
		}

		for (int i=0;i<4;i++) {
			XTime_GetTime(&t_now);
			if (p_t[i] <= ( 1.0 * (t_now - t_p[i]) / (COUNTS_PER_SECOND) )) {
				Plant(i, dac_addr[i]);
				XTime_GetTime(&t_p[i]);
			}
		}

		XTime_GetTime(&t_now);
		elapsed_time = 1.0 * (t_now - t_start) / (COUNTS_PER_SECOND);
	}

	SoftStop(dac);
	End();
	return 0;
}
