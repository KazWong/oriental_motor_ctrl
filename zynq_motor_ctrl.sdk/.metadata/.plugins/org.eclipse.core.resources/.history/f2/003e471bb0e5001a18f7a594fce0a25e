/*
 * canopen.c
 *
 *  Created on: 18 Aug 2020
 *      Author: whwong
 */
#include "zynq_can.h"
#include <stdlib.h>

#include "canopen.h"

PDOMsg PDOMsg_buffer[1024];
int PDOMsg_buf_start_idx = 0;
int PDOMsg_buf_end_idx = 0;

XCanPs Can;
int RxFrame[XCANPS_MAX_FRAME_SIZE_IN_WORDS];

void CANOpenInit() {
	state = BOOTUP;
	CanPsPolledExample(CAN_DEVICE_ID, &Can);
	CANOpenBootUp();
}

void CANOpenBootUp() {
	PDOMsg null = {.cob_id = 0x00, .msg = 0x00, .size = 0x00};
	for (int i=0;i<1024;i++) {
		PDOMsg_buffer[i] = null;
	}
	PDOMsg_buf_start_idx = 0;
	PDOMsg_buf_end_idx = 0;
}

void BootupMsg() {
	s32 Status;
	u8 bootup[] = {0x00};

	do {
		Status = SendFrame(&Can, NMT_NM+NODE_ID, bootup, (u8) sizeof(bootup));
		if (Status != XST_SUCCESS)
			usleep(1000);
	} while(Status != XST_SUCCESS);
}

void CANopenOut() {
//CAN Send
	s16 int_s16 = 0;

	//for (int i=0;i<5;i++) {
	if (PDOMsg_buf_start_idx < PDOMsg_buf_end_idx) {
		int id = PDOMsg_buffer[PDOMsg_buf_start_idx].cob_id;

		SendFrame(&Can, id, PDOMsg_buffer[PDOMsg_buf_start_idx].msg,
				(u8) sizeof(PDOMsg_buffer[PDOMsg_buf_start_idx].msg));

		PDOMsg_buf_start_idx += 1;
		if (PDOMsg_buf_start_idx == 1024)
			PDOMsg_buf_start_idx = 0;
	}
	//}

	/*
	u8 msg_11[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 msg_22[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 msg_33[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 msg_44[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 msg_55[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	u8 msg_66[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

	int_s16 = 0;
	for (int i=0;i<4;i++) {
		s8 *ptr = (s8*)&int_s16;
		int_s16 = (s16)(s[i] * 100.);
		msg_11[2*i] = *(ptr);
		msg_11[2*i+1] = *(ptr+1);
	}


	int_s16 = 0;
	for (int i=0;i<4;i++) {
		s8 *ptr = (s8*)&int_s16;
		int_s16 = (s16)(32767. * a[i] / LIM_SPEED);
		msg_22[2*i] = *(ptr);
		msg_22[2*i+1] = *(ptr+1);
	}

	int_s16 = 0;
	for (int i=0;i<4;i++) {
		s8 *ptr = (s8*)&int_s16;
		int_s16 = (s16)(32767. * y[0][i] / LIM_SPEED);
		msg_33[2*i] = *(ptr);
		msg_33[2*i+1] = *(ptr+1);
	}

	int_s16 = 0;
	for (int i=0;i<4;i++) {
		s8 *ptr = (s8*)&int_s16;
		int_s16 = (s16)(32767. * w[i] / LIM_SPEED);
		msg_44[2*i] = *(ptr);
		msg_44[2*i+1] = *(ptr+1);
	}

	for (int i=0;i<4;i++) {
		u8 *ptr = (u8*)&odom[0];
		msg_55[i] = *(ptr+i);
	}

	for (int i=0;i<4;i++) {
		u8 *ptr = (u8*)&odom[1];
		msg_55[i+4] = *(ptr+i);
	}

	for (int i=0;i<4;i++) {
		u8 *ptr = (u8*)&odom[2];
		msg_66[i] = *(ptr+i);
	}

	SendFrame(&Can, 0x11, msg_11, (u8) sizeof(msg_11));//pos
	SendFrame(&Can, 0x22, msg_22, (u8) sizeof(msg_22));//acc
	SendFrame(&Can, 0x33, msg_33, (u8) sizeof(msg_33));//vel
	SendFrame(&Can, 0x44, msg_44, (u8) sizeof(msg_44));//cmd
	SendFrame(&Can, 0x55, msg_55, (u8) sizeof(msg_55));//odom xy
	SendFrame(&Can, 0x66, msg_66, (u8) sizeof(msg_66));//odom z
	*/
}

void CANopenIn() {
//CAN Receive
	s32 Status;

	Status = RecvFrame(&Can, -1, RxFrame, 10);
	if (Status != XST_SUCCESS) {
		//Status = SendFrame(&Can, 0x01, TxFrame, (u8) sizeof(TxFrame));
		return;
	}

	switch(RxFrame[0]) {
	case ID_NMT_NC:
		if (RxFrame[3] == NODE_ID)
			state = RxFrame[2];
		break;
	case ID_TIMESTAMP:
		break;
	case ID_PDO_WHEEL_S:
	case ID_PDO_WHEEL_A:
	case ID_PDO_WHEEL_Y:
	case ID_PDO_WHEEL_W:
	case ID_PDO_ODOM_X:
	case ID_PDO_ODOM_Y:
	case ID_PDO_ODOM_Z:
		break;
	case ID_PDO_CMD_VEL:
		for (int i=0;i<XCANPS_MAX_FRAME_SIZE_IN_WORDS;i++)
			VelFrame[i] = RxFrame[i];
		break;
	case ID_PDO_CMD_OPT:
		u8 *FramePtr;
		FramePtr = (u8 *)(&RxFrame[2]);
		cmd_opt = *FramePtr;
		break;
	}

	/*if (CheckID(0x88, RxFrame)) {
		for (int i=0;i<XCANPS_MAX_FRAME_SIZE_IN_WORDS;i++)
			VelFrame[i] = RxFrame[i];

	} else*/ if (CheckID(0x99, RxFrame)) {
		u8 *FramePtr;
		FramePtr = (u8 *)(&RxFrame[2]);
		switch (*FramePtr) {
		case 0xEF:
			duration = 0;
			break;
		case 0xDD:
			s[0] = s[1] = s[2] = s[3] = 0.0;
			odom[0] = odom[1] = odom[2] = 0.0;
			break;
		case 0xDF:
			u[0] = u[1] = u[2] = u[3] = 0.0;
			break;
		}
	}
}
